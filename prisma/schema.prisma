// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id          String   @id @default(cuid())
  disease     String
  latitude    Float
  longitude   Float
  details     String?
  // Reporter information
  reportedBy  String?  // User ID
  reporterPhone String?
  reporterName  String?
  status      IncidentStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  // Relations
  reporter    User?    @relation(fields: [reportedBy], references: [id], onDelete: SetNull)
  
  @@index([reportedBy])
  @@index([status])
  @@index([createdAt])
}

// Incident status enum
enum IncidentStatus {
  PENDING
  VERIFIED
  INVESTIGATING
  RESOLVED
  DISMISSED
}

model Disease {
  id             String    @id @default(cuid())
  name           String    @unique
  overview       String    @db.Text
  symptoms       String[]
  causes         String    @db.Text
  prevention     String[]
  treatment      String    @db.Text
  slug           String    @unique
}

// User authentication and role management
model User {
  id           String     @id @default(cuid())
  username     String     @unique
  email        String     @unique
  fullName     String
  password     String     // Hashed password
  role         UserRole
  assignedArea String?    // For ASHA workers and volunteers
  isActive     Boolean    @default(true)
  // Profile information
  phoneNumber  String?
  address      String?
  // Authentication metadata
  lastLoginAt  DateTime?
  isVerified   Boolean    @default(false)
  verificationToken String?
  resetToken   String?
  resetTokenExpiry DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  incidents    Incident[]
  smsAlerts    SmsAlert[]
  otpCodes     OtpCode[]
  
  @@index([role])
  @@index([isActive])
  @@index([assignedArea])
  @@index([email])
}

// OTP Code model for email verification during login
model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  email     String
  code      String   // 6-digit OTP code
  expiresAt DateTime // OTP expiry time (usually 10 minutes)
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([email])
  @@index([code])
  @@index([expiresAt])
}

// User roles enum
enum UserRole {
  ASHA_WORKER
  COMMUNITY_VOLUNTEER
  CLINIC_STAFF
  INCIDENT_REPORTER
  ADMIN
}

// Water quality reports - could be uploaded daily/weekly per location
model WaterQualityReport {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  // e.g., coliform count per 100ml
  coliformCFU Int?
  // turbidity in NTU
  turbidity   Float?
  // dissolved oxygen mg/L
  dissolvedOxygen Float?
  // pH level
  ph          Float?
  // temperature in Celsius
  temperature Float?
  // optional free-form notes
  notes       String?
  collectedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([collectedAt])
}

// Aggregated symptom trends (e.g., clinic / telehealth self-reports) per area and day
model SymptomTrend {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  // reporting date (truncate time for grouping)
  date        DateTime
  // counts of common water-borne symptoms
  diarrheaCount      Int   @default(0)
  vomitingCount      Int   @default(0)
  dehydrationCount   Int   @default(0)
  feverCount         Int   @default(0)
  abdominalPainCount Int   @default(0)
  createdAt   DateTime @default(now())
  @@index([date])
  @@index([latitude, longitude, date])
}

// Stored outbreak risk predictions for map visualization & history
model OutbreakPrediction {
  id              String   @id @default(cuid())
  latitude        Float
  longitude       Float
  generatedAt     DateTime @default(now())
  targetDate      DateTime // date this prediction refers to (e.g., next day/week)
  modelVersion    String
  // Core risk score (0-1)
  riskScore       Float
  // Discrete category derived from score (Low/Moderate/High)
  riskCategory    String
  // Feature snapshot (JSON stringified for transparency / audit)
  features        Json
  // Optional explanation text (e.g., top contributing factors)
  explanation     String? @db.Text
  createdAt       DateTime @default(now())
  @@index([generatedAt])
  @@index([targetDate])
  @@index([latitude, longitude, targetDate])
  @@index([riskCategory])
}

// SMS Alert campaigns for community health monitoring
model SmsAlert {
  id              String      @id @default(cuid())
  diseaseType     String
  severity        SeverityLevel
  affectedCount   Int
  location        String
  actionRequired  String      @db.Text
  customMessage   String?     @db.Text
  // Generated SMS message content
  messageContent  String      @db.Text
  recipients      String[]    // Phone numbers
  status          AlertStatus @default(SENT)
  // Alert creator information
  createdBy       String?     // User ID of health worker who created the alert
  sentAt          DateTime    @default(now())
  createdAt       DateTime    @default(now())
  
  // Relations
  responses       SmsResponse[]
  creator         User?       @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  
  @@index([sentAt])
  @@index([status])
  @@index([diseaseType])
  @@index([severity])
  @@index([location])
  @@index([createdBy])
}

// SMS responses from community members
model SmsResponse {
  id            String        @id @default(cuid())
  alertId       String
  phone         String
  messageText   String        @db.Text
  // Parsed response data
  casesReported Int?          // Number of cases reported
  responseType  ResponseType
  symptoms      String[]      // Extracted symptoms
  urgencyLevel  UrgencyLevel?
  isEmergency   Boolean       @default(false)
  // Location if provided in response
  latitude      Float?
  longitude     Float?
  // Processing metadata
  parsedAt      DateTime?
  confidence    Float?        // AI parsing confidence (0-1)
  rawParsedData Json?         // Full parsing results
  receivedAt    DateTime      @default(now())
  
  // Relations
  alert         SmsAlert      @relation(fields: [alertId], references: [id], onDelete: Cascade)
  
  @@index([alertId])
  @@index([receivedAt])
  @@index([responseType])
  @@index([isEmergency])
  @@index([phone])
}

// Contact groups for SMS distribution
model ContactGroup {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  location    String?   // Geographic area coverage
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  contacts    Contact[]
  
  @@index([isActive])
  @@index([location])
}

// Individual contacts for SMS alerts
model Contact {
  id          String        @id @default(cuid())
  phone       String        @unique
  name        String?
  location    String?
  // Contact metadata
  preferredLanguage String? @default("en")
  isActive    Boolean       @default(true)
  // Opt-in status for different alert types
  diseaseAlerts   Boolean   @default(true)
  emergencyAlerts Boolean   @default(true)
  surveyRequests  Boolean   @default(true)
  // Response tracking
  lastResponseAt DateTime?
  totalResponses Int       @default(0)
  createdAt     DateTime   @default(now())
  
  // Relations
  groups      ContactGroup[]
  
  @@index([phone])
  @@index([isActive])
  @@index([location])
  @@index([lastResponseAt])
}

// SMS templates for quick alert creation
model SmsTemplate {
  id            String      @id @default(cuid())
  name          String
  diseaseType   String
  severity      SeverityLevel
  messageTemplate String    @db.Text // Template with placeholders like {location}, {count}
  actionRequired  String    @db.Text
  isActive      Boolean     @default(true)
  usageCount    Int         @default(0)
  createdBy     String?     // Health worker/admin who created it
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([diseaseType])
  @@index([severity])
  @@index([isActive])
}

// Analytics aggregation for dashboard
model SmsAnalytics {
  id              String   @id @default(cuid())
  date            DateTime // Daily aggregation
  totalAlerts     Int      @default(0)
  totalRecipients Int      @default(0)
  totalResponses  Int      @default(0)
  emergencyCount  Int      @default(0)
  caseCount       Int      @default(0)
  responseRate    Float?   // Percentage
  // Geographic breakdown (JSON)
  locationStats   Json?
  // Disease breakdown (JSON)
  diseaseStats    Json?
  createdAt       DateTime @default(now())
  
  @@unique([date])
  @@index([date])
}

// Enums for SMS system
enum SeverityLevel {
  MILD
  MODERATE
  SEVERE
}

enum AlertStatus {
  DRAFT
  SENT
  DELIVERED
  RESPONDED
  FAILED
}

enum ResponseType {
  NO_CASES
  CASES_REPORTED
  EMERGENCY
  UNCLEAR
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
}
